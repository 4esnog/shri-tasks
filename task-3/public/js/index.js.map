{"version":3,"sources":["js/index.js"],"names":["onMagicButtonClick","e","preventDefault","mediaLoadState","alert","setTimeout","bind","this","document","querySelector","style","opacity","canvas","width","videoWidth","height","videoHeight","ctx","font","subtitleStyles","fontSize","appendChild","remove","onCanvasClick","video","paused","ended","play","audio","pause","onInputChange","type","reader","FileReader","readAsText","target","files","onloadend","subtitles","parseSrt","result","readAsDataURL","createAudio","createVideo","src","createElement","autoplay","controls","defaultMuted","visibility","addEventListener","onVideoPlay","onVideoPause","clientWidth","clientHeight","display","padding","paddingRatio","fontRatio","lineInterval","lineIntervalRatio","console","dir","time","currentTime","toFixed","subtitleIndex","endTime","log","showSubtitle","hideSubtitle","timeLength","drawVideo","getContext","clearRect","drawImage","imgData","getImageData","data","i","length","r","g","b","avg","putImageData","subtl","fillStyle","fillRect","fullTextHeight","content","topPadding","forEach","el","top","left","fillText","text","timeConst","sec","min","hr","temp","split","map","res","subtitle","number","parseInt","startTime","startTimeSec","join","startTimeMin","startTimeHr","endTimeSec","endTimeMin","endTimeHr","splice","download","mime","url","_this","xhr","XMLHttpRequest","open","withCredentials","responseTye","onload","status","Blob","response","send","urls","videoLocal","audioLocal","srt","srtLocal","magicButton","getElementById","videoInput","audioInput","subtitlesInput","undefined"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\n\n// import srt from 'srt.js';\n\nconst urls = {\n\tvideo: 'https://cache-default04g.cdn.yandex.net/kp.cdn.yandex.net/502838/kinopoisk.ru-Sherlock-284167.mp4',\n\tvideoLocal: '../assets/kinopoisk.ru-Sherlock-284167.mp4',\n\n\taudio: 'https://upload.wikimedia.org/wikipedia/commons/2/2c/The_Entertainer_-_1902_-_By_Scott_Joplin.ogg',\n\taudioLocal: '../assets/The_Entertainer_-_1902_-_By_Scott_Joplin.ogg',\n\n\tsrt: 'https://raw.githubusercontent.com/shri-msk-2016/dz-multimedia/master/subs.srt',\n\tsrtLocal: '../assets/subs.srt'\n};\n\n\nlet magicButton = document.getElementById('magic-button');\nlet videoInput = document.getElementById('video');\nlet audioInput = document.getElementById('audio');\nlet subtitlesInput = document.getElementById('subtitles');\nlet canvas = document.createElement('canvas');\nlet\tctx = canvas.getContext('2d');\nlet mediaLoadState = 0;\nlet subtitleIndex = 0;\nlet subtitleStyles = {\n\tfontRatio: 0.055,\n\tpaddingRatio: 0.1,\n\tlineIntervalRatio: 0.5\n};\nlet\tvideoWidth,\n\t\tvideoHeight,\n\t\tvideo,\n\t\taudio,\n\t\tsubtitles;\n\n// === Set initial event handlers ===\nmagicButton.addEventListener('click', onMagicButtonClick);\nvideoInput.addEventListener('change', onInputChange.bind(this, 'video'));\naudioInput.addEventListener('change', onInputChange.bind(this, 'audio'));\nsubtitlesInput.addEventListener('change', onInputChange.bind(this, 'subtitles'));\ncanvas.addEventListener('click', onCanvasClick);\n\n\n// === Helpers ===\n\n// === Handle \"Maigc\" button click ===\nfunction onMagicButtonClick(e) {\n\te.preventDefault();\n\tif (mediaLoadState < 3) {\n\t\talert('Вы что-то забыли :)');\n\t\treturn;\n\n\t} else if (mediaLoadState < 6) {\n\t\tsetTimeout(onMagicButtonClick.bind(this, e), 400);\n\t\tdocument.querySelector('#popup .popup').style.opacity = '0.5';\n\t\treturn;\n\n\t}\n\n\t// canvas.style.width = videoWidth;\n\t// canvas.style.height = videoHeight;\n\tcanvas.width = videoWidth;\n\tcanvas.height = videoHeight;\n\t// ctx.fillStyle = 'white';\n\tctx.font = `${subtitleStyles.fontSize}px Oranienbaum bold, serif`;\n\tdocument.querySelector('body').appendChild(canvas);\n\n\tdocument.querySelector('#popup').remove();\n}\n\nfunction onCanvasClick(e) {\n\tif (video.paused || video.ended) {\n\t\tvideo.play();\n\t\taudio.play();\n\t} else {\n\t\tvideo.pause();\n\t\taudio.pause();\n\t}\n}\n\n\n// === Process input ===\nfunction onInputChange(type, e) {\n\t\n\tlet reader = new FileReader();\n\n\tif (type === 'subtitles') {\n\t\treader.readAsText(e.target.files[0]);\n\t\tmediaLoadState++;\n\t\treader.onloadend = (e) => {\t\t\n\t\t\tsubtitles = parseSrt(reader.result);\n\t\t\tmediaLoadState++;\n\t\t}\n\n\t} else if (type === 'audio') {\n\t\treader.readAsDataURL(e.target.files[0]);\n\t\tmediaLoadState++;\n\t\treader.onloadend = (e) => {\t\t\n\t\t\taudio = createAudio(reader.result);\n\t\t\tmediaLoadState++;\n\t\t}\n\n\t} else if (type === 'video') {\n\t\treader.readAsDataURL(e.target.files[0]);\n\t\tmediaLoadState++;\n\t\treader.onloadend = (e) => {\t\t\n\t\t\tvideo = createVideo(reader.result);\n\t\t\tmediaLoadState++;\n\t\t}\n\n\t}\n\n}\n\n// === Process audio from input ===\nfunction createAudio(src) {\n\tlet audio = document.createElement('audio');\n\taudio.src = src;\n\taudio.autoplay = false;\n\t\n\treturn audio;\n}\n\n// === Process video from input ===\nfunction createVideo(src) {\n\tlet video = document.createElement('video');\n\tvideo.src = src;\n\tvideo.autoplay = false;\n\tvideo.controls = true;\n\tvideo.defaultMuted = true;\n\tvideo.style.visibility = 'hidden';\n\n\tvideo.addEventListener('play', onVideoPlay, false);\n\tvideo.addEventListener('pause', onVideoPause, false);\n\tvideo.addEventListener('loadeddata', (e) => {\n\t\tdocument.querySelector('body').appendChild(video);\n\t\tvideoWidth = video.clientWidth;\n\t\tvideoHeight = video.clientHeight;\n\t\tvideo.style.display = 'none';\n\n\t\tsubtitleStyles.padding = videoWidth * subtitleStyles.paddingRatio;\n\t\tsubtitleStyles.fontSize = videoHeight * subtitleStyles.fontRatio;\n\t\tsubtitleStyles.lineInterval = subtitleStyles.fontSize * subtitleStyles.lineIntervalRatio;\n\t\tconsole.dir(subtitleStyles);\n\t});\n\n\tvideo.addEventListener('timeupdate', (e) => {\n\t\tlet time = (e.target.currentTime * 1000).toFixed();\n\t\tif (time >= subtitles[subtitleIndex].endTime) {\n\t\t\tconsole.log( 'Let\\'s show subtitles! Time: ' + time );\n\t\t\tshowSubtitle(subtitles[subtitleIndex]);\n\t\t\tsetTimeout(hideSubtitle, subtitles[subtitleIndex].timeLength);\n\t\t}\n\t\t\n\t});\n\n\treturn video;\n}\n\n// === Process video.play() ===\nfunction onVideoPlay(e) {\n\tdrawVideo(video, canvas, videoWidth, videoHeight);\n\t// video.style.display = 'none';\n\taudio.play();\n}\n\n// === Process video.pause() ===\nfunction onVideoPause(e) {\n\t// video.pause();\n\t// audio.pause();\n}\n\n// === Draw video on canvas with Effects ===\nfunction drawVideo(video, canvas, width, height) {\n\t\n\tif (video.paused || video.ended) {\n\t\treturn false;\n\t}\n\n\tlet ctx = canvas.getContext('2d');\n\n\tctx.clearRect(0, 0, canvas.width, canvas.height);\n\n\tctx.drawImage(video, 0, 0, width, height);\n\tlet imgData = ctx.getImageData(0, 0, width, height);\n\tlet data = imgData.data;\n\n\tfor (let i = 0; i < data.length; i+=4) {\n\t\tlet r = data[i];\n\t\tlet g = data[i+1];\n\t\tlet b = data[i+2];\n\n\t\tlet avg = (0.21 * r) + (0.72 * g) + (0.07 * b);\n\n\t\tdata[i] = avg;\n\t\tdata[i+1] = avg;\n\t\tdata[i+2] = avg;\n\t}\n\n\tctx.putImageData(imgData, 0, 0);\n\n\tsetTimeout(drawVideo, 20, video, canvas, width, height);\n}\n\nfunction showSubtitle(subtl) {\n\tvideo.pause();\n\tctx.fillStyle = 'black';\n\tctx.fillRect(0, 0, canvas.width, canvas.height);\n\tctx.fillStyle = 'white';\n\tlet fullTextHeight = (subtl.content.length * subtitleStyles.fontSize)\n\t\t\t\t\t\t\t + ((subtl.content.length - 1) * subtitleStyles.lineInterval);\n\tlet topPadding = (videoHeight - fullTextHeight) / 2;\n\tsubtl.content.forEach((el, i) => {\n\t\tlet top = topPadding + (subtitleStyles.fontSize * i)\n\t\t\t\t\t\t\t+ (subtitleStyles.lineInterval * i);\n\t\tlet left = subtitleStyles.padding;\n\t\t// console.log(top + '~~~' + left);\n\t\tctx.fillText(el, left, top);\n\t});\n\t\n}\n\nfunction hideSubtitle() {\n\n\tsubtitleIndex++;\n\tvideo.play();\n}\n\n// === Parse .SRT to Array of subtitles ===\nfunction parseSrt(text) {\n\tlet timeConst = {\n\t\tsec: 1000,\n\t\tmin: 60,\n\t\thr: 60\n\t};\n\tlet temp = text.split('\\n\\n');\n\n\tlet result = temp.map((el) => {\n\n\t\tlet res = {};\n\t\tlet subtitle = el.split('\\n');\n\n\t\t// === Get subtitle's number ===\n\t\tres.number = parseInt(subtitle[0]);\n\n\t\tlet time = subtitle[1].split(' --> ');\n\n\t\t// === Convert start time to MS ===\n\t\tlet startTime = time[0].split(':');\n\t\tlet startTimeSec = parseInt(startTime[2].split(',').join(''));\n\t\tlet startTimeMin = parseInt(startTime[1]) * timeConst.min * timeConst.sec;\n\t\tlet startTimeHr = parseInt(startTime[0]) * timeConst.hr * timeConst.min * timeConst.sec;\n\t\tstartTime = startTimeSec + startTimeMin\t+ startTimeHr;\n\t\tres.startTime = startTime;\n\n\t\t// === Convert end time to MS ===\n\t\tlet endTime = time[1].split(':');\n\t\tlet endTimeSec = parseInt(endTime[2].split(',').join(''));\n\t\tlet endTimeMin = parseInt(endTime[1]) * timeConst.min * timeConst.sec;\n\t\tlet endTimeHr = parseInt(endTime[0]) * timeConst.hr * timeConst.min * timeConst.sec;\n\t\tendTime = endTimeSec + endTimeMin\t+ endTimeHr;\n\t\tres.endTime = endTime;\n\n\t\tres.timeLength = endTime - startTime;\n\n\t\t// res.content = subtitle.reduce((prev, el, i) => {\n\t\t// \tif (i > 1) {\n\t\t// \t\treturn prev + el + '\\n';\n\t\t// \t} else {\n\t\t// \t\treturn '';\n\t\t// \t}\n\t\t// });\n\n\t\t// === Join subtitle content ===\n\t\tsubtitle.splice(0, 2);\n\t\tres.content = subtitle;\n\t\tconsole.dir(res.content);\n\n\t\treturn res;\n\t});\n\n\treturn result;\n\n}\n\n\n\n\n\n\n\n// TODO CORS xhr\nfunction download(mime, url) {\n\t// console.log('inside');\n\tlet xhr = new XMLHttpRequest();\n\n\txhr.open('GET', url, true);\n\txhr.withCredentials = true;\n\txhr.responseTye = 'blob';\n\n\n\txhr.onload = (e) => {\n\t\tif (this.status === 200) {\n\t\t\tlet blob = new Blob(\n\t\t\t\t[this.response],\n\t\t\t\t{\n\t\t\t\t\ttype: mime\n\t\t\t\t}\n\t\t\t);\n\n\t\t\t// console.dir(blob);\n\n\t\t}\n\t};\n\n\txhr.send();\n}\n\n// loadMedia('video/mp4', urls.video);"],"sourceRoot":"/source/"}